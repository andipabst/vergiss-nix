import com.android.build.api.dsl.ManagedVirtualDevice
import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.devtools.ksp'
    id 'org.jetbrains.kotlin.plugin.compose'
}

ksp {
    arg("room.schemaLocation", "$projectDir/schemas".toString())
}

android {
    compileSdk 36

    defaultConfig {
        applicationId "de.andicodes.vergissnix"
        minSdkVersion 26
        targetSdkVersion 34
        versionCode 21
        versionName "2.3.0"
        archivesBaseName = "vergiss-nix-${versionName}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.3'
    }
    testOptions {
        unitTests.includeAndroidResources = true
        managedDevices {
            devices {
                pixel6Api30(ManagedVirtualDevice) {
                    // Use device profiles you typically see in Android Studio.
                    device = "Pixel 6"
                    // Use only API levels 27 and higher.
                    apiLevel = 30
                    // To include Google services, use "google".
                    systemImageSource = "aosp-atd"
                }
            }
        }

    }
    sourceSets {
        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    buildFeatures {
        compose true
    }
    namespace 'de.andicodes.vergissnix'

    // don't include dependencies signing block to allow F-Droid to reproduce builds
    dependenciesInfo {
        includeInApk = false
        includeInBundle = false
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.9.4'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.9.4'

    var nav_version = '2.9.4'
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.navigation:navigation-compose:$nav_version"

    var room_version = '2.8.0'
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    ksp "androidx.room:room-compiler:$room_version"

    implementation 'androidx.core:core-ktx:1.17.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // compose dependencies
    def composeBom = platform('androidx.compose:compose-bom:2025.09.00')
    implementation composeBom
    androidTestImplementation composeBom

    implementation "androidx.compose.material3:material3"

    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'

    implementation 'androidx.activity:activity-compose'
    implementation "androidx.compose.animation:animation"

    implementation "androidx.compose.runtime:runtime-livedata"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose'

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.assertj:assertj-core:3.27.6"
    testImplementation "androidx.room:room-testing:$room_version"
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    androidTestImplementation "org.assertj:assertj-core:3.27.6"
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'
}

// sort baseline profiles to enable reproducible builds for F-Droid
// see https://gist.github.com/obfusk/eb82a810ed6aad266dab19977b18cee6
project.afterEvaluate {
    tasks.compileReleaseArtProfile.doLast {
        outputs.files.each { file ->
            if (file.toString().endsWith(".profm")) {
                println("Sorting ${file} ...")
                def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
                def profile = ArtProfileKt.ArtProfile(file)
                def keys = new ArrayList(profile.profileData.keySet())
                def sortedData = new LinkedHashMap()
                Collections.sort keys, new DexFile.Companion()
                keys.each { key -> sortedData[key] = profile.profileData[key] }
                new FileOutputStream(file).with {
                    write(version.magicBytes$profgen)
                    write(version.versionBytes$profgen)
                    version.write$profgen(it, sortedData, "")
                }
            }
        }
    }
}
